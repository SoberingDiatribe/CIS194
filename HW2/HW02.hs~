{-# OPTIONS_GHC -Wall #-}
module HW02 where

-- Mastermind -----------------------------------------

-- A peg can be one of six colors
data Peg = Red | Green | Blue | Yellow | Orange | Purple
         deriving (Show, Eq, Ord)

-- A code is defined to simply be a list of Pegs
type Code = [Peg]

-- A move is constructed using a Code and two integers; the number of
-- exact matches and the number of regular matches
data Move = Move Code Int Int
          deriving (Show, Eq)

-- List containing all of the different Pegs
colors :: [Peg]
colors = [Red, Green, Blue, Yellow, Orange, Purple]

-- Exercise 1 -----------------------------------------

-- Get the number of exact matches between the actual code and the guess
exactMatches :: Code -> Code -> Int
exactMatches code guess = length [() | (c, g) <- zipped, c == g]
    where
        zipped = zip code guess

-- Exercise 2 -----------------------------------------

-- For each peg in xs, count how many times is occurs in ys
countColors :: Code -> [Int]
countColors = countColors' colors

-- Helper function for countColors
countColors' :: [Peg] -> Code -> [Int]
countColors' [] _code = []
countColors' (x:xs) code = numOfColor : (countColors' xs code)
    where
        numOfColor = length [x | y <- code, y == x]

-- Count number of matches between the actual code and the guess
matches :: Code -> Code -> Int
matches code guess = sum [min c g | (c, g) <- zipped]
    where
        zipped = zip (countColors code) (countColors guess)

-- Exercise 3 -----------------------------------------

-- Construct a Move from a guess given the actual code
getMove :: Code -> Code -> Move
getMove code guess = Move guess exact nonexact
    where
        exact = exactMatches code guess
        nonexact = (matches code guess) - exact

-- Exercise 4 -----------------------------------------

isConsistent :: Move -> Code -> Bool
isConsistent (Move guess exact nonexact) code = (exact == exact') && (nonexact == nonexact')
    where
        Move _ exact' nonexact' = getMove code guess

-- Exercise 5 -----------------------------------------

filterCodes :: Move -> [Code] -> [Code]
filterCodes move codes = [code | code <- codes, isConsistent move code]

-- Exercise 6 -----------------------------------------

allCodes :: Int -> [Code]
allCodes n
    | n <= 0    = []
    | otherwise = allCodes' (n-1) [[color] | color <- colors]

allCodes' :: Int -> [Code] -> [Code]
allCodes' 0 accs = accs
allCodes' n accs = allCodes' (n-1) [(color:acc) | color <- colors, acc <- accs]

-- Exercise 7 -----------------------------------------

solve :: Code -> [Move]
solve code = solve' code guesses [move]
    where
        guess:guesses = allCodes $ length code
        move = getMove code guess

solve' :: Code -> [Code] -> [Move] -> [Move]
solve' code guesses (move:moves)
    | length code == exact = (move:moves)
    | otherwise = solve' code newGuesses (newMove:move:moves)
    where
        Move _ exact _nonexact = move
        newGuess:newGuesses = filterCodes move guesses
        newMove = getMove code newGuess

-- Bonus ----------------------------------------------

fiveGuess :: Code -> [Move]
fiveGuess = undefined
