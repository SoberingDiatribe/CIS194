module HW03 where

data Expression =
    Var String                   -- Variable
  | Val Int                      -- Integer literal
  | Op Expression Bop Expression -- Operation
  deriving (Show, Eq)

-- Binary (2-input) operators
data Bop = 
    Plus     
  | Minus    
  | Times    
  | Divide   
  | Gt
  | Ge       
  | Lt  
  | Le
  | Eql
  deriving (Show, Eq)

data Statement =
    Assign   String     Expression
  | Incr     String
  | If       Expression Statement  Statement
  | While    Expression Statement       
  | For      Statement  Expression Statement Statement
  | Sequence Statement  Statement        
  | Skip
  deriving (Show, Eq)

type State = String -> Int

-- Exercise 1 -----------------------------------------

extend :: State -> String -> Int -> State
extend state str val = (\var -> if var == str then val else state var)

empty :: State
empty = (\_ -> 0)

-- Exercise 2 -----------------------------------------

evalE :: State -> Expression -> Int
evalE state (Var str) = state str
evalE state (Val int) = int
evalE state (Op exp1 bop exp2) =
    case bop of
        Plus   -> eval1 + eval2
        Minus  -> eval1 - eval2
        Times  -> eval1 * eval2
        Divide -> eval1 `div` eval2
        Gt     -> boolToInt (eval1 > eval2)
        Ge     -> boolToInt (eval1 >= eval2)
        Lt     -> boolToInt (eval1 < eval2)
        Le     -> boolToInt (eval1 <= eval2)
        Eql    -> boolToInt (eval1 == eval2)
    where
        eval1 = evalE state exp1
        eval2 = evalE state exp2
        boolToInt bool = if bool then 1 else 0

-- Exercise 3 -----------------------------------------

data DietStatement = DAssign String Expression
                   | DIf Expression DietStatement DietStatement
                   | DWhile Expression DietStatement
                   | DSequence DietStatement DietStatement
                   | DSkip
                     deriving (Show, Eq)

desugar :: Statement -> DietStatement
desugar (Assign str exp) = DAssign str exp
desugar (Incr str) = DAssign str (Op (Var str) Plus (Val 1))
desugar (If exp statement1 statement2) = DIf exp (desugar statement1) (desugar statement2)
desugar (While exp statement) = DWhile exp (desugar statement)
desugar (For statement1 exp statement2 statement3) = DSequence (desugar statement1) (DWhile exp (DSequence (desugar statement3) (desugar statement2)))
desugar (Sequence statement1 statement2) = DSequence (desugar statement1) (desugar statement2)
desugar Skip = DSkip

-- Exercise 4 -----------------------------------------

evalSimple :: State -> DietStatement -> State
evalSimple state (DAssign str exp) = extend state str (evalE state exp)
evalSimple state (DIf exp dstatement1 dstatement2) = if (evalE state exp) /= 0 then (evalSimple state dstatement1) else (evalSimple state dstatement2)
evalSimple state while@(DWhile exp dstatement) = if (evalE state exp) /= 0 then evalSimple (evalSimple state dstatement) while else state
evalSimple state (DSequence dstatement1 dstatement2) = evalSimple (evalSimple state dstatement1) dstatement2
evalSimple state DSkip = state

run :: State -> Statement -> State
run state statement = evalSimple state (desugar statement)

-- Programs -------------------------------------------

slist :: [Statement] -> Statement
slist [] = Skip
slist l  = foldr1 Sequence l

{- Calculate the factorial of the input

   for (Out := 1; In > 0; In := In - 1) {
     Out := In * Out
   }
-}
factorial :: Statement
factorial = For (Assign "Out" (Val 1))
                (Op (Var "In") Gt (Val 0))
                (Assign "In" (Op (Var "In") Minus (Val 1)))
                (Assign "Out" (Op (Var "In") Times (Var "Out")))


{- Calculate the floor of the square root of the input

   B := 0;
   while (A >= B * B) {
     B++
   };
   B := B - 1
-}
squareRoot :: Statement
squareRoot = slist [ Assign "B" (Val 0)
                   , While (Op (Var "A") Ge (Op (Var "B") Times (Var "B")))
                       (Incr "B")
                   , Assign "B" (Op (Var "B") Minus (Val 1))
                   ]

{- Calculate the nth Fibonacci number

   F0 := 1;
   F1 := 1;
   if (In == 0) {
     Out := F0
   } else {
     if (In == 1) {
       Out := F1
     } else {
       for (C := 2; C <= In; C++) {
         T  := F0 + F1;
         F0 := F1;
         F1 := T;
         Out := T
       }
     }
   }
-}
fibonacci :: Statement
fibonacci = slist [ Assign "F0" (Val 1)
                  , Assign "F1" (Val 1)
                  , If (Op (Var "In") Eql (Val 0))
                       (Assign "Out" (Var "F0"))
                       (If (Op (Var "In") Eql (Val 1))
                           (Assign "Out" (Var "F1"))
                           (For (Assign "C" (Val 2))
                                (Op (Var "C") Le (Var "In"))
                                (Incr "C")
                                (slist
                                 [ Assign "T" (Op (Var "F0") Plus (Var "F1"))
                                 , Assign "F0" (Var "F1")
                                 , Assign "F1" (Var "T")
                                 , Assign "Out" (Var "T")
                                 ])
                           )
                       )
                  ]
